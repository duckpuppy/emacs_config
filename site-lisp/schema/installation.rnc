# 
#         =====================================
#         The DTD for IzPack Installation Files
#         =====================================
# $Id$
#

# The root element

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

installation =
  element installation {
    attlist.installation,
    info,
    packaging?,
    properties?,
    variables?,
    dynamicvariables?,
    conditions?,
    installerrequirements?,
    guiprefs?,
    locale,
    resources?,
    panels,
    listeners?,
    packs,
    jar*,
    native*
  }
attlist.installation &= attribute version { text }
# The info section (general information on an installation)
info =
  element info {
    attlist.info,
    appname,
    appversion,
    appsubpath?,
    authors?,
    url?,
    javaversion?,
    uninstaller?,
    webdir?,
    summarylogfilepath?,
    writeinstallationinformation?
  }
attlist.info &= empty
appname = element appname { attlist.appname, text }
attlist.appname &= empty
appversion = element appversion { attlist.appversion, text }
attlist.appversion &= empty
appsubpath = element appsubpath { attlist.appsubpath, text }
attlist.appsubpath &= empty
authors = element authors { attlist.authors, author* }
attlist.authors &= empty
author = element author { attlist.author, empty }
attlist.author &= attribute name { text }
attlist.author &= attribute email { text }
url = element url { attlist.url, text }
attlist.url &= empty
javaversion = element javaversion { attlist.javaversion, text }
attlist.javaversion &= empty
requiresjdk = element requiresjdk { attlist.requiresjdk, text }
attlist.requiresjdk &= empty
uninstaller = element uninstaller { attlist.uninstaller, empty }
attlist.uninstaller &=
  [ a:defaultValue = "yes" ] attribute write { "yes" | "no" }?
attlist.uninstaller &=
  [ a:defaultValue = "uninstaller.jar" ] attribute name { text }?
attlist.uninstaller &= attribute condition { text }?
attlist.uninstaller &= attribute path { text }?
webdir = element webdir { attlist.webdir, text }
attlist.webdir &= empty
summarylogfilepath =
  element summarylogfilepath { attlist.summarylogfilepath, text }
attlist.summarylogfilepath &= empty
writeinstallationinformation =
  element writeinstallationinformation {
    attlist.writeinstallationinformation, text
  }
attlist.writeinstallationinformation &= empty
packaging = element packaging { attlist.packaging, packager, unpacker }
attlist.packaging &= empty
packager = element packager { attlist.packager, options }
attlist.packager &= attribute class { text }
options = element options { attlist.options, empty }
attlist.options &= attribute volumesize { text }?
attlist.options &= attribute firstvolumefreespace { text }?
unpacker = element unpacker { attlist.unpacker, empty }
attlist.unpacker &= attribute class { text }
# The properties markup (property declarations)
properties = element properties { attlist.properties, property* }
attlist.properties &= empty
property = element property { attlist.property, empty }
attlist.property &= attribute name { text }?
attlist.property &= attribute value { text }?
attlist.property &= attribute file { text }?
attlist.property &= attribute environment { text }?
attlist.property &= attribute prefix { text }?
# The variables markup (variable declarations)
variables = element variables { attlist.variables, variable* }
attlist.variables &= empty
variable = element variable { attlist.variable, empty }
attlist.variable &= attribute name { text }
attlist.variable &= attribute value { text }
attlist.variable &= attribute condition { text }?
# The conditions markup (condition declarations)
conditions = element conditions { attlist.conditions, condition* }
attlist.conditions &= empty
# condition elements can have child elements depending on the specific type
condition = element condition { attlist.condition, empty }
attlist.condition &= attribute type { text }
attlist.condition &= attribute id { text }
# The installer requirements markup
installerrequirements =
  element installerrequirements {
    attlist.installerrequirements, installerrequirement*
  }
attlist.installerrequirements &= empty
installerrequirement =
  element installerrequirement { attlist.installerrequirement, empty }
attlist.installerrequirement &= attribute condition { text }
attlist.installerrequirement &= attribute message { text }
dynamicvariables =
  element dynamicvariables { attlist.dynamicvariables, variables* }
attlist.dynamicvariables &= empty
# The guiprefs markup (customizes the installer in GUI mode)
guiprefs = element guiprefs { attlist.guiprefs, laf*, modifier* }
attlist.guiprefs &= attribute resizable { "yes" | "no" }
attlist.guiprefs &= attribute width { text }
attlist.guiprefs &= attribute height { text }
laf = element laf { attlist.laf, os+, param* }
attlist.laf &= attribute name { text }
param = element param { attlist.param, empty }
attlist.param &=
  attribute name { text },
  attribute value { text }
# Well defined modifier for gui characteristics.
# Possible keys are "useButtonIcons" and
# "useLabelIcons" both with value "yes" or "no".
modifier = element modifier { attlist.modifier, empty }
attlist.modifier &= attribute key { text }
attlist.modifier &= attribute value { text }
# The locale section (indicates which langpacks to include)
locale = element locale { attlist.locale, langpack+ }
attlist.locale &= empty
langpack = element langpack { attlist.langpack, empty }
attlist.langpack &= attribute iso3 { text }
# The resources section (resources for the panel's usings)
resources = element resources { attlist.resources, res* }
attlist.resources &= empty
res = element res { attlist.res, empty }
attlist.res &= attribute src { text }
attlist.res &= attribute id { text }
attlist.res &=
  [ a:defaultValue = "no" ] attribute parse { "yes" | "no" }?
attlist.res &= [ a:defaultValue = "plain" ] attribute type { text }?
attlist.res &= attribute encoding { text }?
# The panels section (indicates the panels to use)
panels = element panels { attlist.panels, panel+ }
attlist.panels &= empty
panel = element panel { attlist.panel, os* }
attlist.panel &= attribute os { "unix" | "windows" | "mac" }?
attlist.panel &= attribute classname { text }
attlist.panel &= attribute condition { text }?
attlist.panel &= attribute id { text }?
attlist.panel &= attribute jar { text }?
# The listener section (indicates which listener where to use)
listeners = element listeners { attlist.listeners, listener* }
attlist.listeners &= empty
listener = element listener { attlist.listener, os* }
attlist.listener &= attribute compiler { text }?
attlist.listener &= attribute installer { text }?
attlist.listener &= attribute uninstaller { text }?
attlist.listener &= attribute jar { text }?
# The packs section (indicates the packs to create)
packs = element packs { attlist.packs, (pack | refpack)+ }
attlist.packs &= empty
pack =
  element pack {
    attlist.pack,
    description,
    os*,
    file*,
    singlefile*,
    fileset*,
    updatecheck?,
    parsable*,
    executable*,
    depends*
  }
attlist.pack &= attribute name { text }
attlist.pack &= attribute id { text }?
attlist.pack &= attribute condition { text }?
attlist.pack &= attribute packImgId { xsd:IDREF }?
attlist.pack &= attribute required { "yes" | "no" }
attlist.pack &=
  [ a:defaultValue = "yes" ] attribute preselected { "yes" | "no" }?
attlist.pack &= attribute os { "unix" | "windows" | "mac" }?
attlist.pack &=
  [ a:defaultValue = "false" ] attribute loose { "true" | "false" }?
attlist.pack &= attribute group { text }?
attlist.pack &= attribute installGroups { text }?
attlist.pack &= attribute excludeGroup { text }?
attlist.pack &=
  [ a:defaultValue = "yes" ] attribute uninstall { "yes" | "no" }?
attlist.pack &= attribute parent { text }?
description = element description { attlist.description, text }
attlist.description &= empty
file = element file { attlist.file, os*, additionaldata* }
attlist.file &= attribute src { text }
attlist.file &= attribute targetdir { text }
attlist.file &= attribute os { "unix" | "windows" | "mac" }?
attlist.file &=
  [ a:defaultValue = "update" ]
  attribute override {
    "true" | "false" | "asktrue" | "askfalse" | "update"
  }?
attlist.file &= attribute condition { text }?
singlefile =
  element singlefile { attlist.singlefile, os*, additionaldata* }
attlist.singlefile &= attribute src { text }
attlist.singlefile &= attribute target { text }
attlist.singlefile &= attribute os { "unix" | "windows" | "mac" }?
attlist.singlefile &=
  [ a:defaultValue = "update" ]
  attribute override {
    "true" | "false" | "asktrue" | "askfalse" | "update"
  }?
attlist.files &= attribute condition { text }?
fileset =
  element fileset {
    attlist.fileset, \include*, exclude*, os*, additionaldata*
  }
attlist.fileset &= attribute dir { text }
attlist.fileset &= attribute targetdir { text }
attlist.fileset &=
  [ a:defaultValue = "yes" ] attribute casesensitive { "yes" | "no" }?
attlist.fileset &=
  [ a:defaultValue = "yes" ] attribute defaultexcludes { "yes" | "no" }?
attlist.fileset &= attribute os { "unix" | "windows" | "mac" }?
attlist.fileset &=
  [ a:defaultValue = "update" ]
  attribute override {
    "true" | "false" | "asktrue" | "askfalse" | "update"
  }?
attlist.fileset &= attribute includes { text }?
attlist.fileset &= attribute excludes { text }?
attlist.fileset &= attribute condition { text }?
\include = element include { attlist.include, empty }
attlist.include &= attribute name { text }
exclude = element exclude { attlist.exclude, empty }
attlist.exclude &= attribute name { text }
additionaldata =
  element additionaldata { attlist.additionaldata, empty }
attlist.additionaldata &= attribute key { text }
attlist.additionaldata &= attribute value { text }
parsable = element parsable { attlist.parsable, os* }
attlist.parsable &= attribute targetfile { text }
attlist.parsable &=
  [ a:defaultValue = "plain" ] attribute type { text }?
attlist.parsable &= attribute encoding { text }?
attlist.parsable &= attribute os { "unix" | "windows" | "mac" }?
attlist.parsable &= attribute condition { text }?
executable = element executable { attlist.executable, args?, os* }
attlist.executable &= attribute targetfile { text }?
attlist.executable &= attribute class { text }?
attlist.executable &=
  [ a:defaultValue = "bin" ] attribute type { "bin" | "jar" }?
attlist.executable &=
  [ a:defaultValue = "never" ]
  attribute stage { "postinstall" | "never" | "uninstall" }?
attlist.executable &=
  [ a:defaultValue = "ask" ]
  attribute failure { "abort" | "warn" | "ask" }?
attlist.executable &=
  [ a:defaultValue = "false" ] attribute keep { "true" | "false" }?
attlist.executable &= attribute condition { text }?
args = element args { attlist.args, arg+ }
attlist.args &= empty
arg = element arg { attlist.arg, empty }
attlist.arg &= attribute value { text }
os = element os { attlist.os, empty }
attlist.os &= attribute family { "unix" | "windows" | "mac" }
attlist.os &= attribute name { text }?
attlist.os &= attribute version { text }?
attlist.os &= attribute arch { text }?
updatecheck =
  element updatecheck { attlist.updatecheck, \include*, exclude* }
attlist.updatecheck &= empty
depends = element depends { attlist.depends, empty }
attlist.depends &= attribute packname { text }
refpack = element refpack { attlist.refpack, empty }
attlist.refpack &= attribute file { text }
# Allows the inclusion in the installer or uninstaller of a native library
native = element native { attlist.native, os* }
attlist.native &= attribute type { "izpack" | "3rdparty" }
attlist.native &= attribute name { text }
attlist.native &=
  [ a:defaultValue = "install" ]
  attribute stage { "install" | "uninstall" | "both" }?
attlist.native &= attribute src { text }?
# Allows the inclusion in the installer of an additional jar file content
jar = element jar { attlist.jar, empty }
attlist.jar &= attribute src { text }
attlist.jar &=
  [ a:defaultValue = "install" ]
  attribute stage { "install" | "uninstall" | "both" }?
files |= notAllowed
start = installation | requiresjdk
